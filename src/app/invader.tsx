/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.13 public\invader.glb -t 
*/

import * as THREE from 'three'
import React, { useEffect } from 'react'
import { Wireframe, useGLTF } from '@react-three/drei'
import { GLTF } from 'three-stdlib'
import { animated, useSpring, useSpringValue } from '@react-spring/three'
import { degToRad } from 'three/src/math/MathUtils'

type GLTFResult = GLTF & {
  nodes: {
    Plane001: THREE.Mesh
  }
  materials: {
    green: THREE.MeshBasicMaterial
  }
}

const AnimateWireframe: any = animated(Wireframe);

type ContextType = Record<string, React.ForwardRefExoticComponent<JSX.IntrinsicElements['mesh']>>

export function Model({ props, runAnimation }: { props: JSX.IntrinsicElements['group'], runAnimation: boolean }) {
  const uncorrectedInvaderColour = new THREE.Color(0x3cf000);
  const fixedInvaderColour = uncorrectedInvaderColour.convertLinearToSRGB();
  const invaderBlack = new THREE.Color(0x000000);

  const { nodes } = useGLTF('/invader.glb') as GLTFResult

  let [animation, animationApi] = useSpring(() => ({
    from: {
      strokeOpacity: 0,
      fillOpacity: 1,
      fill: fixedInvaderColour,
      rotation: [Math.PI, 0, 0],

    },
    to: async (next, cancel) => {
      await next({ strokeOpacity: 1, fillOpacity: 0, });
      await next({ fillOpacity: 1, fill: invaderBlack, immediate: true });
      await next({ rotation: [degToRad(200), 0, Math.PI / 4] });
    },
    pause: true,
  }), []);

  useEffect(() => {
    async function run() {
      if (runAnimation) {
        animationApi.resume();
      }
    }
    run();
  }, [runAnimation, animationApi]);


  return (
    <group {...props} dispose={null}>
      <animated.group scale={[3, 1, 4]} rotation={(animation.rotation as any)}>
        <AnimateWireframe
          geometry={nodes.Plane001.geometry}
          stroke={fixedInvaderColour}
          fill={animation.fill}
          strokeOpacity={animation.strokeOpacity}
          fillOpacity={animation.fillOpacity} />
      </animated.group>
    </group>
  )
}

useGLTF.preload('/invader.glb')
